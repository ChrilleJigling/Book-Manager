{"version":3,"sources":["components/Titles.js","components/Form.js","components/Books.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","React","Component","Form","onSubmit","this","props","addBooks","type","name","placeholder","changeApiKey","className","apiKey","Books","Table","books","map","book","key","id","title","author","Button","color","size","url","getApiKey","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","cachedKey","wrap","_context","prev","next","localStorage","getItem","abrupt","fetch","concat","then","response","json","result","sent","setItem","stop","apply","arguments","App","state","error","_callee2","e","limit","_ref3","status","message","_context2","preventDefault","target","elements","value","reset","console","log","objectWithoutProperties","objectSpread","_this","setState","getBooks","window","alert","_callee3","_context3","_callee4","_ref6","data","_context4","components_Titles","components_Form","components_Books","index","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bb90941f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Titles extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Book Manager</h1>\r\n        <p>Add a book!</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Titles;\r\n","import React from \"react\";\r\n\r\nclass Form extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.props.addBooks}>\r\n          <input type=\"text\" name=\"title\" placeholder=\"Title...\" />\r\n          <input type=\"text\" name=\"author\" placeholder=\"Author...\" />\r\n          <button>Send</button>\r\n        </form>\r\n\r\n        <form onSubmit={this.props.changeApiKey}>\r\n          <p>\r\n            <button className=\"mr-2\">Change Api Key </button>\r\n            Current Key: {this.props.apiKey}\r\n          </p>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\r\nimport { Table, Button } from \"reactstrap\";\r\n\r\nclass Books extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App container\">\r\n        <Table>\r\n          <thead>\r\n            <tr className=\"book_title\">\r\n              <th>#ID</th>\r\n              <th>Title</th>\r\n              <th>Author</th>\r\n              <th>Action </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.books &&\r\n              this.props.books.map(function(book, key) {\r\n                return (\r\n                  <tr className=\"book_value\" key={book.id}>\r\n                    <td>{book.id}</td>\r\n                    <td>{book.title}</td>\r\n                    <td>{book.author}</td>\r\n                    <td>\r\n                      <Button color=\"success\" size=\"sm\">\r\n                        Edit\r\n                      </Button>\r\n                      <Button color=\"danger\" size=\"sm\">\r\n                        Delete\r\n                      </Button>\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Books;\r\n","import React, { Component } from \"react\";\r\nimport Titles from \"./components/Titles\";\r\nimport Form from \"./components/Form\";\r\nimport Books from \"./components/Books\";\r\n\r\nconst url = \"https://www.forverkliga.se/JavaScript/api/crud.php\";\r\n\r\nconst getApiKey = async () => {\r\n  const cachedKey = localStorage.getItem(\"apiKey\");\r\n  if (cachedKey) {\r\n    return cachedKey;\r\n  } else {\r\n    const apiKey = await fetch(`${url}?requestKey`)\r\n      .then(response => response.json())\r\n      .then(result => result.key);\r\n    localStorage.setItem(\"apiKey\", apiKey);\r\n    return apiKey;\r\n  }\r\n};\r\n\r\nclass App extends Component {\r\n  state = {\r\n    books: [],\r\n    apiKey: localStorage.getItem(\"apiKey\"),\r\n    error: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getBooks();\r\n  }\r\n\r\n  addBooks = async e => {\r\n    e.preventDefault();\r\n\r\n    var title = e.target.elements.title.value;\r\n    var author = e.target.elements.author.value;\r\n    e.target.reset();\r\n    const key = await getApiKey();\r\n\r\n    console.log(key);\r\n    if (title && author) {\r\n      for (let limit = 0; limit < 10; limit++) {\r\n        const { status, message, ...response } = await fetch(\r\n          `https://www.forverkliga.se/JavaScript/api/crud.php?key=${key}&op=insert&title=${title}&author=${author}`\r\n        ).then(response => response.json());\r\n\r\n        if (status === \"success\") {\r\n          console.log(\"added book successfully\");\r\n          console.log(`status: ${status}`);\r\n          console.log(`Number of retries: ${limit}`);\r\n          console.log({ ...response });\r\n          this.setState({\r\n            limit: limit,\r\n            error: \"\"\r\n          });\r\n          this.getBooks();\r\n          if (limit === 0) {\r\n            window.alert(\r\n              `Status: ${status}\\nWe managed to add your book to the list after ${limit +\r\n                1} try!`\r\n            );\r\n          } else {\r\n            window.alert(\r\n              `Status: ${status}\\nWe managed to add your book to the list after ${limit +\r\n                1} tries!`\r\n            );\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          window.alert(`Status: ${status}\\nOperation Failed`);\r\n          console.log(`ERROR: ${message}`);\r\n        }\r\n      }\r\n    } else {\r\n      this.setState({\r\n        error: \"Please enter the values\"\r\n      });\r\n    }\r\n  };\r\n\r\n  changeApiKey = async e => {\r\n    e.preventDefault();\r\n    const apiKey = await fetch(`${url}?requestKey`)\r\n      .then(response => response.json())\r\n      .then(result => result.key);\r\n    localStorage.setItem(\"apiKey\", apiKey);\r\n    this.setState({\r\n      apiKey: apiKey\r\n    });\r\n    this.getBooks();\r\n  };\r\n\r\n  getBooks = async e => {\r\n    e && e.preventDefault();\r\n    const key = await getApiKey();\r\n    console.log(key);\r\n\r\n    for (let limit = 0; limit < 10; limit++) {\r\n      const { status, message, ...data } = await fetch(\r\n        `https://www.forverkliga.se/JavaScript/api/crud.php?key=${key}&op=select`\r\n      ).then(response => response.json());\r\n\r\n      if (status === \"success\") {\r\n        console.log(\"Books were successfully displayed\");\r\n        console.log(`status: ${status}`);\r\n        console.log(`Number of retries: ${limit + 1}`);\r\n        console.log({ data });\r\n        console.log(data.data);\r\n        this.setState({\r\n          books: data.data,\r\n          limit: limit\r\n        });\r\n        break;\r\n      } else {\r\n        console.log(`ERROR: ${message}`);\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const data = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"wrapper\">\r\n          <div className=\"main\">\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-xs-5 title-container\">\r\n                  <Titles />\r\n                </div>\r\n                <div className=\"col-xss-7 form-container\">\r\n                  <Titles />\r\n                  {data.error}\r\n                  <Form\r\n                    changeApiKey={this.changeApiKey}\r\n                    addBooks={this.addBooks}\r\n                    apiKey={data.apiKey}\r\n                  />\r\n                  <Books books={data.books} index={data.books.index} />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}